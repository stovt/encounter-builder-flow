{"version":3,"sources":["shared/components/forms/Button.styled.js","shared/components/forms/Select.styled.js","shared/components/forms/Input.styled.js","shared/components/forms/index.js","pages/EncounterBattle/EncounterBattle.actions.js","shared/components/Title/Title.styled.js","shared/components/Title/index.js","pages/EncounterBattle/EncounterBattle.selectors.js","pages/EncounterBattle/BattleTable/HPInput/HPInput.component.js","pages/EncounterBattle/BattleTable/HPInput/HPInput.container.js","pages/EncounterBattle/BattleTable/StateMultiSelect/StateMultiSelect.constants.js","pages/EncounterBattle/BattleTable/StateMultiSelect/StateMultiSelect.styled.js","pages/EncounterBattle/BattleTable/StateMultiSelect/MultiValueLabel/MultiValueLabel.component.js","pages/EncounterBattle/BattleTable/StateMultiSelect/StateMultiSelect.component.js","pages/EncounterBattle/BattleTable/StateMultiSelect/StateMultiSelect.container.js","pages/EncounterBattle/BattleTable/BattleTable.component.js","pages/EncounterBattle/BattleTable/BattleTable.container.js","pages/EncounterBattle/ButtonsWrapper/ButtonsWrapper.styled.js","pages/EncounterBattle/BackButton/BackButton.styled.js","pages/EncounterBattle/BackButton/BackButton.component.js","pages/EncounterBattle/NextTurnButton/NextTurnButton.styled.js","pages/EncounterBattle/NextTurnButton/NextTurnButton.component.js","pages/EncounterBattle/NextTurnButton/NextTurnButton.container.js","pages/EncounterBattle/EncounterBattle.component.js","pages/EncounterBattle/EncounterBattle.container.js","pages/EncounterBattle/index.js"],"names":["bigBtnStyles","css","_templateObject","styled","button","_templateObject2","props","theme","paddings","small","colors","btn","shadow","concat","prime1","prime2","white","select","Select_styled_templateObject","input","border","focusBorder","focusShadow","Input_styled_templateObject","__webpack_require__","d","__webpack_exports__","Button_styled","Select_styled","Input_styled","ADD_MONSTER_TO_BATTLE_TABLE","SET_MONSTER_HP","SET_MONSTER_STATE","NEXT_TURN","addMonsterToBattleTable","setMonsterHP","setMonsterState","nextTurn","monster","type","rowID","hp","state","centerStyles","h2","margins","medium","fontSize","title","center","Title_styled","getMonsters","encounterBattle","monsters","getTurn","turn","HPInput","value","_this","handleOnChange","_ref","target","test","setState","handleOnBlur","_ref2","oldValue","eval","_unused","_this$props","Number","Function","react_default","a","createElement","components_forms","onChange","this","onBlur","React","PureComponent","connect","dispatch","MONSTER_STATES","customStyles","container","styles","Object","objectSpread","width","control","menuIsOpen","selectProps","isFocused","borderRadius","borderColor","boxShadow","backgroundColor","&:hover","dropdownIndicator","transition","transform","menu","margin","menuList","padding","multiValueLabel","whiteSpace","injectIntl","formatMessage","intl","data","descriptionItemsCount","id","arraySequence","Array","from","val","index","rest","objectWithoutProperties","component","chunk_5d200a41_browser_esm","MultiValueLabel","lib","parent","position","arrow","map","number","key","StateMultiSelect","_this$props2","options","label","react_select_browser_esm","isMulti","name","components","menuPortalTarget","document","body","placeholder","BattleTable","handleTrProps","style","cursor","background","handleTdProps","rowInfo","column","onClick","e","handleOriginal","showModal","MONSTER_INFO_MODAL_ID","monsterID","original","columns","Header","accessor","Cell","HPInput_container","justifyContent","_ref3","armor_desc","armor_class","_ref4","walk","speed","burrow","fly","swim","climb","slice","_ref5","StateMultiSelect_container","_ref6","action","desc","flexDirection","alignItems","tableData","row","hit_points","initiative","actions","react_table_es","showPagination","resizable","sortable","minRows","previousText","nextText","loadingText","noDataText","pageText","ofText","rowsText","pageJumpText","rowsSelectorText","getTrProps","getTdProps","modalId","div","StyledButton","withComponent","NavLink","BackButton_styled_templateObject","BackButton","BackButton_styled","to","index_es","NextTurnButton_styled_templateObject","NextTurnButton","NextTurnButton_styled","EncounterBattle","length","styled_flexboxgrid_es","xs","Title","BattleTable_container","ButtonsWrapper_styled","BackButton_component","NextTurnButton_container","EncounterBattle_container"],"mappings":"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","file":"static/js/encounterBattle.c39eed3d.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nexport const bigBtnStyles = css`\n  font-size: 20px;\n  padding: 10px;\n`;\n\nexport default styled.button`\n  display: block;\n  font-size: 1em;\n  transition: all 0.1s ease;\n  cursor: pointer;\n  outline: none;\n  padding: ${props => props.theme.paddings.small};\n  border-radius: 4px;\n  border: 1px solid transparent;\n  box-shadow: 0 4px 8px 0 ${props => props.theme.colors.btn.shadow};\n  background: ${props => `linear-gradient(79deg, ${props.theme.colors.btn.prime1}, ${props.theme.colors.btn.prime2})`};\n  color: ${props => props.theme.colors.white};\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  &:active {\n    opacity: 0.8;\n  }\n\n  &:disabled {\n    opacity: 0.3;\n    cursor: text;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.select`\n  height: 34px;\n  border-radius: 4px;\n  background-color: ${props => props.theme.colors.white};\n  line-height: 34px;\n  padding: 0 15px;\n  border: 1px solid ${props => props.theme.colors.input.border};\n  outline: none;\n\n  &:focus {\n    border: solid 1px ${props => props.theme.colors.input.focusBorder};\n    box-shadow: 0 4px 16px 0 ${props => props.theme.colors.input.focusShadow};\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.input`\n  height: 34px;\n  width: 100%;\n  border-radius: 4px;\n  background-color: ${props => props.theme.colors.white};\n  line-height: 34px;\n  padding: 0 15px;\n  border: 1px solid ${props => props.theme.colors.input.border};\n  outline: none;\n\n  &:focus {\n    box-shadow: 0 4px 16px 0 ${props => props.theme.colors.input.focusShadow};\n    border: solid 1px ${props => props.theme.colors.input.focusBorder};\n  }\n`;\n","// @flow\nexport { default as StyledButton, bigBtnStyles } from './Button.styled';\nexport { default as StyledSelect } from './Select.styled';\nexport { default as StyledInput } from './Input.styled';\n","// @flow\nimport type { EncounterBattleAction } from 'shared/types/encounterBattle';\nimport type { Monster, MonsterState } from 'shared/types/monsters';\n\nexport const ADD_MONSTER_TO_BATTLE_TABLE = 'encounterBattle/ADD_MONSTER_TO_BATTLE_TABLE';\nexport const SET_MONSTER_HP = 'encounterBattle/SET_MONSTER_HP';\nexport const SET_MONSTER_STATE = 'encounterBattle/SET_MONSTER_STATE';\nexport const NEXT_TURN = 'encounterBattle/NEXT_TURN';\n\nexport const addMonsterToBattleTable = (monster: Monster): EncounterBattleAction => ({\n  type: ADD_MONSTER_TO_BATTLE_TABLE, monster\n});\nexport const setMonsterHP = (rowID: string, hp: number): EncounterBattleAction => ({\n  type: SET_MONSTER_HP, rowID, hp\n});\n\nexport const setMonsterState = (rowID: string, state: MonsterState): EncounterBattleAction => ({\n  type: SET_MONSTER_STATE, rowID, state\n});\n\nexport const nextTurn = (): EncounterBattleAction => ({\n  type: NEXT_TURN\n});\n","import styled, { css } from 'styled-components';\n\nconst centerStyles = css`\n  text-align: center;\n`;\n\nexport default styled.h2`\n  margin: 0;\n  margin-bottom: ${props => props.theme.margins.medium};\n  font-size: ${props => props.theme.fontSize.title};\n  font-weight: normal;\n  line-height: 1;\n  ${props => (props.center && centerStyles)}\n`;\n","// @flow\nexport { default } from './Title.styled';\n","// @flow\nimport type { State } from 'shared/types';\nimport type { BattleMonsterRows } from 'shared/types/monsters';\n\nexport const getMonsters = (state: State): BattleMonsterRows => (\n  state.encounterBattle ? state.encounterBattle.monsters : []\n);\nexport const getTurn = (state: State): number => (\n  state.encounterBattle.turn\n);\n","// @flow\nimport React from 'react';\nimport type { EncounterBattleAction } from 'shared/types/encounterBattle';\nimport { StyledInput } from 'shared/components/forms';\n\ntype Value = string | number;\n\ntype Props = {\n  value: Value,\n  rowID: string,\n  setMonsterHP: (rowID: string, hp: number) => EncounterBattleAction\n};\n\ntype State = {\n  value: Value\n}\n\nclass HPInput extends React.PureComponent<Props, State> {\n  state = {\n    value: this.props.value\n  };\n\n  handleOnChange = ({ target: { value } }: SyntheticInputEvent<HTMLInputElement>): void => {\n    if (/^[\\s\\d()+\\-*/.]*$/.test(value)) {\n      this.setState({ value });\n    }\n  }\n\n  handleOnBlur = ({ target: { value } }: SyntheticInputEvent<HTMLInputElement>): void => {\n    const { value: oldValue } = this.props;\n    try {\n      this.setMonsterHP(this.eval(value));\n    } catch {\n      this.setMonsterHP(oldValue);\n    }\n  }\n\n  setMonsterHP = (hp: string | number): void => {\n    const { setMonsterHP, rowID } = this.props;\n    setMonsterHP(rowID, Number(hp));\n  }\n\n  // eslint-disable-next-line no-new-func\n  eval = (value: Value): number => Number(new Function(`return ${value}`)())\n\n  render() {\n    return (\n      <StyledInput\n        onChange={this.handleOnChange}\n        onBlur={this.handleOnBlur}\n        value={this.state.value}\n      />\n    );\n  }\n}\n\nexport default HPInput;\n","// @flow\nimport { connect } from 'react-redux';\nimport type { Dispatch } from 'shared/types';\nimport { setMonsterHP } from 'pages/EncounterBattle/EncounterBattle.actions';\nimport HPInput from './HPInput.component';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setMonsterHP: (rowID: string, hp: number) => dispatch(setMonsterHP(rowID, hp))\n});\n\n\nexport default connect(null, mapDispatchToProps)(HPInput);\n","// @flow\nexport const MONSTER_STATES: string[] = ['unconscious', 'frightened', 'invisible', 'incapacitated', 'deafened', 'petrified', 'restrained', 'blinded', 'poisoned', 'charmed', 'stunned', 'paralyzed', 'prone', 'grappled'];\n","// @flow\nimport type { StylesConfig } from 'react-select/src/styles';\nimport { theme } from 'styles';\n\nexport const customStyles: StylesConfig = {\n  container: styles => ({\n    ...styles,\n    width: '100%'\n  }),\n  control: (styles, { selectProps: { menuIsOpen }, isFocused }) => ({\n    ...styles,\n    borderRadius: menuIsOpen ? '4px 4px 0 0' : 4,\n    borderColor: isFocused ? theme.colors.input.focusBorder : theme.colors.input.border,\n    boxShadow: isFocused ? '0 4px 16px 0 '.concat(theme.colors.input.focusShadow) : null,\n    backgroundColor: theme.colors.white,\n    '&:hover': {\n      borderColor: isFocused ? theme.colors.input.focusBorder : theme.colors.input.border,\n      boxShadow: isFocused ? '0 4px 16px 0 '.concat(theme.colors.input.focusShadow) : null\n    }\n  }),\n  dropdownIndicator: (styles, { selectProps: { menuIsOpen } }) => ({\n    ...styles,\n    transition: 'all .2s ease',\n    transform: menuIsOpen ? 'rotate(180deg)' : null\n  }),\n  menu: styles => ({\n    ...styles,\n    margin: 0,\n    borderRadius: '0 0 4px 4px'\n  }),\n  menuList: styles => ({\n    ...styles,\n    padding: 0\n  }),\n  multiValueLabel: styles => ({\n    ...styles,\n    whiteSpace: 'normal'\n  })\n};\n","// @flow\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\nimport { StatefulToolTip } from 'react-portal-tooltip';\nimport { components } from 'react-select';\nimport type { MultiValueProps } from 'react-select/src/components/MultiValue';\n\ntype Props = {\n  intl: IntlShape\n} & MultiValueProps;\n\nconst MultiValueLabel = (props: Props) => {\n  const { intl: { formatMessage }, data: { value } } = props;\n  const descriptionItemsCount: number = Number(formatMessage({ id: `monster.states.${value}-description-texts-count` }));\n  const arraySequence: number[] = Array.from(\n    new Array(descriptionItemsCount), (val: number, index) => index + 1\n  );\n\n  const { intl: omitIntl, ...rest } = props;\n  const component = <components.MultiValueLabel {...rest} />;\n\n  return (\n    <StatefulToolTip parent={component} position=\"bottom\" arrow=\"center\">\n      <ul>\n        {arraySequence.map(number => (\n          <li key={number}>{formatMessage({ id: `monster.states.${value}-description-text-${number}` })}</li>\n        ))}\n      </ul>\n    </StatefulToolTip>\n  );\n};\n\nexport default injectIntl(MultiValueLabel);\n","// @flow\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\nimport Select from 'react-select';\nimport type { EncounterBattleAction } from 'shared/types/encounterBattle';\nimport type { MonsterState } from 'shared/types/monsters';\nimport { MONSTER_STATES } from './StateMultiSelect.constants';\nimport { customStyles } from './StateMultiSelect.styled';\nimport MultiValueLabel from './MultiValueLabel';\n\ndeclare var document: any;\n\ntype Props = {\n  value: MonsterState,\n  rowID: string,\n  setMonsterState: (rowID: string, state: MonsterState) => EncounterBattleAction,\n  intl: IntlShape\n}\n\nclass StateMultiSelect extends React.PureComponent<Props> {\n  handleOnChange = (value: MonsterState) => {\n    const { setMonsterState, rowID } = this.props;\n    setMonsterState(rowID, value);\n  };\n\n  render() {\n    const { value, intl: { formatMessage } } = this.props;\n\n    const options = MONSTER_STATES.map(state => ({\n      label: formatMessage({ id: `monster.states.${state}` }),\n      value: state\n    }));\n\n    return (\n      <Select\n        isMulti\n        name=\"colors\"\n        options={options}\n        components={{ MultiValueLabel }}\n        // $FlowFixMe\n        onChange={this.handleOnChange}\n        value={value}\n        styles={customStyles}\n        menuPortalTarget={document.body}\n        placeholder={`${formatMessage({ id: 'monster.state' })}...`}\n      />\n    );\n  }\n}\n\nexport default injectIntl(StateMultiSelect);\n","// @flow\nimport { connect } from 'react-redux';\nimport type { Dispatch } from 'shared/types';\nimport type { MonsterState } from 'shared/types/monsters';\nimport { setMonsterState } from 'pages/EncounterBattle/EncounterBattle.actions';\nimport StateMultiSelect from './StateMultiSelect.component';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setMonsterState: (rowID: string, state: MonsterState) => dispatch(setMonsterState(rowID, state))\n});\n\nexport default connect(null, mapDispatchToProps)(StateMultiSelect);\n","// @flow\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\nimport ReactTable from 'react-table';\nimport type { MonsterActions, BattleMonsterRows, MonsterSpeed } from 'shared/types/monsters';\nimport type { ModalsAction } from 'shared/types/modals';\nimport { MONSTER_INFO_MODAL_ID } from 'shared/components/MonsterInfoModal/MonsterInfoModal.constants';\nimport HPInput from './HPInput';\nimport StateMultiSelect from './StateMultiSelect';\n\ntype Props = {\n  monsters: BattleMonsterRows,\n  turn: number,\n  showModal: (modalId: string, data: { monsterID: string }) => ModalsAction,\n  intl: IntlShape\n}\n\nclass BattleTable extends React.PureComponent<Props> {\n  handleTrProps = (state: any, { index }: any) => {\n    const { turn } = this.props;\n    return {\n      style: {\n        cursor: 'auto',\n        background: turn === index ? '#e4e4e4' : 'inherit'\n      }\n    };\n  }\n\n  handleTdProps = (state: any, rowInfo: any, column: any): {} => ({\n    onClick: (e, handleOriginal) => {\n      if (column.id === 'monster.name') {\n        this.props.showModal(MONSTER_INFO_MODAL_ID, { monsterID: rowInfo.original.monster.id });\n      }\n      if (handleOriginal) handleOriginal();\n    }\n  })\n\n  render() {\n    const { monsters, intl: { formatMessage } } = this.props;\n\n    const columns = [{\n      Header: formatMessage({ id: 'monster.name' }),\n      accessor: 'monster.name',\n      width: 250,\n      style: {\n        cursor: 'pointer'\n      }\n    }, {\n      Header: formatMessage({ id: 'monster.hit-points' }),\n      accessor: 'monster.hit_points',\n      Cell: (\n        { original: { rowID }, value }: { original: any, value: string | number }\n      ) => <HPInput rowID={rowID} value={value} />,\n      width: 100,\n      style: { justifyContent: 'center' }\n    }, {\n      Header: `${formatMessage({ id: 'monster.armor' })} (${formatMessage({ id: 'monster.armor-class' })})`,\n      accessor: 'monster',\n      Cell: ({ value }: { value: any }) => (value.armor_desc ? `${value.armor_desc} (${value.armor_class})` : value.armor_class),\n      width: 160\n    }, {\n      Header: formatMessage({ id: 'monster.initiative' }),\n      accessor: 'monster.initiative',\n      style: { justifyContent: 'center' },\n      width: 120\n    }, {\n      Header: formatMessage({ id: 'monster.speed.title' }),\n      accessor: 'monster.speed',\n      Cell: ({ value }: { value: MonsterSpeed }) => {\n        const speed = `\\\n        ${value.walk ? `${formatMessage({ id: 'monster.speed.walk' }, { speed: value.walk })}, ` : ''}\\\n        ${value.burrow ? `${formatMessage({ id: 'monster.speed.burrow' }, { speed: value.burrow })}, ` : ''}\\\n        ${value.fly ? `${formatMessage({ id: 'monster.speed.fly' }, { speed: value.fly })}, ` : ''}\\\n        ${value.swim ? `${formatMessage({ id: 'monster.speed.swim' }, { speed: value.swim })}, ` : ''}\\\n        ${value.climb ? `${formatMessage({ id: 'monster.speed.climb' }, { speed: value.climb })}, ` : ''}\\\n        `.slice(0, -2);\n\n        return speed;\n      },\n      width: 160\n    }, {\n      Header: formatMessage({ id: 'monster.state' }),\n      accessor: 'monster.state',\n      Cell: (\n        { original: { rowID }, value }: { original: any, value: string | number }\n      ) => <StateMultiSelect rowID={rowID} value={value} />,\n      width: 240\n    }, {\n      Header: formatMessage({ id: 'monster.actions' }),\n      accessor: 'monster.actions',\n      Cell: ({ value }: { value: MonsterActions }) => value.map(action => (\n        <span key={action.name}><b>{action.name}.</b> {action.desc}</span>\n      )),\n      style: { flexDirection: 'column', alignItems: 'normal' }\n    }];\n\n    const tableData = monsters.map(row => ({\n      rowID: row.rowID,\n      monster: {\n        id: row.monster.id,\n        name: row.monster.name,\n        hit_points: row.monster.hit_points,\n        armor_class: row.monster.armor_class,\n        armor_desc: row.monster.armor_desc,\n        initiative: row.monster.initiative,\n        speed: row.monster.speed,\n        state: row.monster.state,\n        actions: row.monster.actions\n      }\n    }));\n\n    return (\n      <ReactTable\n        data={tableData}\n        columns={columns}\n        showPagination={false}\n        resizable={false}\n        sortable={false}\n        minRows={1}\n        previousText={formatMessage({ id: 'table-labels.previousText' })}\n        nextText={formatMessage({ id: 'table-labels.nextText' })}\n        loadingText={formatMessage({ id: 'table-labels.loadingText' })}\n        noDataText={formatMessage({ id: 'table-labels.noDataText' })}\n        pageText={formatMessage({ id: 'table-labels.pageText' })}\n        ofText={formatMessage({ id: 'table-labels.ofText' })}\n        rowsText={formatMessage({ id: 'table-labels.rowsText' })}\n        pageJumpText={formatMessage({ id: 'table-labels.pageJumpText' })}\n        rowsSelectorText={formatMessage({ id: 'table-labels.rowsSelectorText' })}\n        getTrProps={this.handleTrProps}\n        getTdProps={this.handleTdProps}\n      />\n    );\n  }\n}\n\nexport default injectIntl(BattleTable);\n","// @flow\nimport { connect } from 'react-redux';\nimport type { State, Dispatch } from 'shared/types';\nimport { showModal } from 'shared/components/Modal/Modal.actions';\nimport { getTurn } from '../EncounterBattle.selectors';\nimport { setMonsterHP } from '../EncounterBattle.actions';\nimport BattleTable from './BattleTable.component';\n\nconst mapStateToProps = (state: State) => ({\n  turn: getTurn(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setMonsterHP: (rowID: string, hp: number) => dispatch(setMonsterHP(rowID, hp)),\n  showModal: (modalId: string, data: { monsterID: string }) => dispatch(showModal(modalId, data))\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BattleTable);\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: ${props => props.theme.margins.medium};\n`;\n","import styled from 'styled-components';\nimport { StyledButton, bigBtnStyles } from 'shared/components/forms';\nimport { NavLink } from 'react-router-dom';\n\nexport default styled(StyledButton.withComponent(NavLink))` ${bigBtnStyles} `;\n","// @flow\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport StyledBackButton from './BackButton.styled';\n\nconst BackButton = () => (\n  <StyledBackButton to=\"/\">\n    <FormattedMessage id=\"encounter-battle.back\" />\n  </StyledBackButton>\n);\n\nexport default BackButton;\n","import styled from 'styled-components';\nimport { StyledButton, bigBtnStyles } from 'shared/components/forms';\n\nexport default styled(StyledButton)` ${bigBtnStyles} `;\n","// @flow\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { EncounterBattleAction } from 'shared/types/encounterBattle';\nimport StyledNextTurnButton from './NextTurnButton.styled';\n\ntype Props = {\n  nextTurn: () => EncounterBattleAction\n}\n\nconst NextTurnButton = ({ nextTurn }: Props) => (\n  <StyledNextTurnButton onClick={nextTurn}>\n    <FormattedMessage id=\"encounter-battle.next-turn\" />\n  </StyledNextTurnButton>\n);\n\nexport default NextTurnButton;\n","// @flow\nimport { connect } from 'react-redux';\nimport type { Dispatch } from 'shared/types';\nimport { nextTurn } from 'pages/EncounterBattle/EncounterBattle.actions';\nimport NextTurnButton from './NextTurnButton.component';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  nextTurn: () => dispatch(nextTurn())\n});\n\n\nexport default connect(null, mapDispatchToProps)(NextTurnButton);\n","// @flow\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Col, Row } from 'react-styled-flexboxgrid';\nimport type { BattleMonsterRows } from 'shared/types/monsters';\nimport StyledTitle from 'shared/components/Title';\nimport BattleTable from './BattleTable';\nimport ButtonsWrapper from './ButtonsWrapper';\nimport BackButton from './BackButton';\nimport NextTurnButton from './NextTurnButton';\n\nconst EncounterBattle = ({ monsters }: { monsters: BattleMonsterRows }) => {\n  if (!monsters.length) {\n    return (\n      <Row>\n        <Col xs={12}>\n          <Row>\n            <Col xs={12}>\n              <StyledTitle center><FormattedMessage id=\"encounter-battle.add-monsters-before-start-battle\" /></StyledTitle>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12}>\n              <ButtonsWrapper>\n                <BackButton />\n              </ButtonsWrapper>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <Row>\n      <Col xs={12}>\n        <Row>\n          <Col xs={12}>\n            <StyledTitle center><FormattedMessage id=\"encounter-battle.title\" /></StyledTitle>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <BattleTable monsters={monsters} />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <ButtonsWrapper>\n              <BackButton />\n              <NextTurnButton />\n            </ButtonsWrapper>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default EncounterBattle;\n","// @flow\nimport { connect } from 'react-redux';\nimport type { State } from 'shared/types';\nimport { getMonsters } from './EncounterBattle.selectors';\nimport EncounterBattle from './EncounterBattle.component';\n\nconst mapStateToProps = (state: State) => ({\n  monsters: getMonsters(state)\n});\n\n\nexport default connect(mapStateToProps)(EncounterBattle);\n","// @flow\nexport { default } from './EncounterBattle.container';\n"],"sourceRoot":""}